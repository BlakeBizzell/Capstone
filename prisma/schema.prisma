generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String?
  price       Float?
  description String?
  class       String?
  carts       Cart[]
  cartItems   CartItem[]
}

model Users {
  id           Int            @id @default(autoincrement())
  username     String?        @unique
  password     String?
  firstName    String?
  lastName     String?
  email        String?
  admin        Boolean        @default(false)
  cartItems    CartItem[]
  tokens       Token[]
  carts        Cart[]
  players      Player[]
  MonsterInfo  MonsterInfo[]
  RandomName   RandomName[]
  TreasureInfo TreasureInfo[]
}

model Player {
  id         Int     @id @default(autoincrement())
  name       String?
  race       String?
  classValue String?
  level      Int?
  ac         String?
  weaknesses String?
  goals      String?
  sheetLink  String?

  user   Users @relation(fields: [userId], references: [id])
  userId Int
}

model Cart {
  id        Int     @id @default(autoincrement())
  user      Users   @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)
}

model CartItem {
  id        Int     @id @default(autoincrement())
  user      Users   @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)

  @@unique([userId, productId])
}

model Token {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  valid      Boolean  @default(true)
  expiration DateTime
  tokens     String
  user       Users?   @relation(fields: [userId], references: [id])
  userId     Int
}

model MonsterInfo {
  id              Int    @id @default(autoincrement())
  name            String
  challengeRating Float
  hitPoints       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Users? @relation(fields: [userId], references: [id])
  userId Int
}

model RandomName {
  id        Int      @id @default(autoincrement())
  race      String
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Users @relation(fields: [userId], references: [id])
  userId Int
}

model TreasureInfo {
  id        Int      @id @default(autoincrement())
  type      String 
  name      String? 
  amount    Int? 
  unit      String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  user   Users? @relation(fields: [userId], references: [id])
  userId Int
}
